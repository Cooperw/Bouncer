{"ast":null,"code":"import _regeneratorRuntime from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sharkbones/ETHDenver/Bouncer/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sharkbones/ETHDenver/Bouncer/src/components/AuthMonitor.js\";\nimport React, { Component } from \"react\";\nimport { Button, Header, Icon, Modal, Form, Message, Container } from \"semantic-ui-react\";\nimport web3 from \"../web3\";\nimport bouncer from \"../bouncer\";\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n    _this.state = {\n      message: \"Please present identification\",\n      errorMessage: \"\",\n      processing: false,\n      message_color: \"black\"\n    };\n\n    _this.handleOpen = function () {\n      return _this.setState({\n        modalOpen: true\n      });\n    };\n\n    _this.handleClose = function () {\n      return _this.setState({\n        modalOpen: false\n      });\n    };\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var AccessListId, PublicKeyId, ePuk, Puk, challenge, sig_verified;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                _context.prev = 1;\n\n                _this.setState({\n                  processing: true,\n                  message: \"Fetching PukID from credentials ...\",\n                  message_color: \"black\"\n                }); //Load default routing data\n\n\n                AccessListId = _this.props.AccessListId;\n                PublicKeyId = _this.props.fetchPublicKeyId();\n\n                _this.setState({\n                  message: \"Skale-ing the walls looking for your ePuk ...\"\n                }); //Import account\n\n\n                _this.state.metaAccount = web3.eth.accounts.privateKeyToAccount(_this.props.account.privateKey);\n                _this.state.fromAddress = _this.state.metaAccount.address.toLowerCase();\n                console.log(_this.props.AccessListId);\n                _context.next = 11;\n                return bouncer.methods.getKey(_this.props.AccessListId, PublicKeyId).call({\n                  from: _this.state.metaAccount.address\n                });\n\n              case 11:\n                ePuk = _context.sent;\n\n                _this.setState({\n                  message: \"Sending ePuk to Engima for intense transformation ...\"\n                }); // pass ePuk to enigma for decryption, temp fix pre-decrypted\n\n\n                Puk = ePuk;\n                challenge = Date.now();\n\n                _this.setState({\n                  message: \"Puk found, are your creds up to the challenge ???\"\n                }); // Use Puk and Challenge/Response to verify the sig/response\n\n\n                sig_verified = _this.state.postChallengeResponse(challenge, Puk);\n\n                if (sig_verified) {\n                  //Grant access\n                  _this.setState({\n                    message: \"ACCESS GRANTED\",\n                    message_color: \"green\"\n                  });\n                } else {\n                  //Deny access\n                  _this.setState({\n                    message: \"ACCESS DENIED\",\n                    message_color: \"red\"\n                  });\n                } // Give some time for people to read their status\n\n\n                setTimeout({}, 1000 * 5);\n                _context.next = 24;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](1);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 24:\n                _this.setState({\n                  processing: false,\n                  message: \"Please present identification\",\n                  message_color: \"black\"\n                });\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 21]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        error: !!this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Message, {\n        error: true,\n        header: \"Oops!\",\n        content: this.state.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Button, {\n        primary: true,\n        type: \"submit\",\n        loading: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Emulate YubiKey Contact\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.message)));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nexport { Register as default };","map":{"version":3,"sources":["/home/sharkbones/ETHDenver/Bouncer/src/components/AuthMonitor.js"],"names":["React","Component","Button","Header","Icon","Modal","Form","Message","Container","web3","bouncer","Register","props","state","message","errorMessage","processing","message_color","handleOpen","setState","modalOpen","handleClose","onSubmit","event","preventDefault","AccessListId","PublicKeyId","fetchPublicKeyId","metaAccount","eth","accounts","privateKeyToAccount","account","privateKey","fromAddress","address","toLowerCase","console","log","methods","getKey","call","from","ePuk","Puk","challenge","Date","now","sig_verified","postChallengeResponse","setTimeout","loading"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Header, Icon, Modal, Form, Message, Container } from \"semantic-ui-react\";\nimport web3 from \"../web3\";\nimport bouncer from \"../bouncer\";\n\nexport default class Register extends Component {\n\tstate = {\n\t\tmessage: \"Please present identification\",\n\t\terrorMessage: \"\",\n\t\tprocessing: false,\n\t\tmessage_color: \"black\"\n\t};\n\n\thandleOpen = () => this.setState({ modalOpen: true });\n\n\thandleClose = () => this.setState({ modalOpen: false });\n\n\tconstructor(props){\n\t\tsuper(props);\n\t}\n\n\n    onSubmit = async event => {\n        event.preventDefault();\n\n\ttry{\n\t\tthis.setState({\n\t\t    processing: true,\n\t\t    message: \"Fetching PukID from credentials ...\",\n\t    \t    message_color: \"black\"\n\t\t});\n\n\t\t//Load default routing data\n\t\tlet AccessListId = this.props.AccessListId;\n\t\tlet PublicKeyId = this.props.fetchPublicKeyId();\n\n\t\tthis.setState({\n\t\t    message: \"Skale-ing the walls looking for your ePuk ...\"\n\t\t});\n\n\t\t//Import account\n\t\tthis.state.metaAccount = web3.eth.accounts.privateKeyToAccount(this.props.account.privateKey);\n\t\tthis.state.fromAddress = this.state.metaAccount.address.toLowerCase();\n\n\n\t\tconsole.log(this.props.AccessListId)\n\n\t\tlet ePuk = await bouncer.methods.getKey(this.props.AccessListId, PublicKeyId).call({\n\t\t\t\t        from: this.state.metaAccount.address\n\t\t\t\t});\n\n\t\tthis.setState({\n\t\t    message: \"Sending ePuk to Engima for intense transformation ...\"\n\t\t});\n\n\t\t// pass ePuk to enigma for decryption, temp fix pre-decrypted\n\t\tlet Puk = ePuk;\n\n\t\tlet challenge = Date.now();\n\n\t\tthis.setState({\n\t\t    message: \"Puk found, are your creds up to the challenge ???\"\n\t\t});\n\n\t\t// Use Puk and Challenge/Response to verify the sig/response\n\t\tlet sig_verified = this.state.postChallengeResponse(challenge, Puk);\n\n\t\tif (sig_verified){\n\t\t\t//Grant access\n\t\t\tthis.setState({\n\t\t\t    message: \"ACCESS GRANTED\",\n\t\t\t    message_color: \"green\"\n\t\t\t});\n\t\t} else {\n\t\t\t//Deny access\n\t\t\tthis.setState({\n\t\t\t    message: \"ACCESS DENIED\",\n\t\t\t    message_color: \"red\"\n\t\t\t});\n\t\t}\n\n\t\t// Give some time for people to read their status\n\t\tsetTimeout({}, 1000 * 5); \n\n\t} catch (err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({\n            processing: false,\n            message: \"Please present identification\",\n\t    message_color: \"black\"\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n\t\t    <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n\t\t\t<Message error header=\"Oops!\" content={this.state.errorMessage} />\n\t\t\t<Button primary type=\"submit\" loading={this.state.loading}>\n\t\t\t\tEmulate YubiKey Contact\n\t\t\t</Button>\n\t\t\t<hr />\n\t\t\t<h2>{this.state.message}</h2>\n\t\t    </Form>\n\t    </Container>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}